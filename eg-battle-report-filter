// ==UserScript==
// @name         Evergore Gruppenbericht filtern
// @description  Fügt dem Gruppenbericht einen Button hinzu, um nur Kämpfe und gefunden Pläne anzuzeigen
// @version      0.4
// @author       mofte
// @match        https://evergore.de/lenoran?page=msg_view*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    if (document.body.innerHTML.includes("Kampfereignis beendet.")) {
        const nav2Div = document.getElementById('nav2');
        const playerName = nav2Div ? nav2Div.querySelector('h2')?.textContent.trim() : null;

        const filterButton = document.createElement("button");
        filterButton.textContent = "Kampfberichte filtern";
        filterButton.className = "btn";
        filterButton.style.marginLeft = "10px";

        const deleteButton = document.querySelector('input[value="Löschen"]');
        if (deleteButton) {
            deleteButton.parentNode.appendChild(filterButton);
        }

        filterButton.addEventListener("click", async () => {
            filterButton.remove(); // Entferne den Filter-Button nach Klick
            createResetButton(); // Erstelle den Zurücksetzen-Button

            const paragraphs = document.querySelectorAll("p");
            let battleCount = 0;
            let winCount = 0;
            const formattedLines = [];
            const allPlans = new Set();

            for (let p of paragraphs) {
                if (p.innerHTML.startsWith("<b>Gruppenmitglieder</b>")) {
                    const lines = p.innerHTML.split("<br>");
                    const filteredLines = lines.filter((line) =>
                        line.includes('<a href="?page=battle_report')
                    );

                    battleCount += filteredLines.length;

                    for (let line of filteredLines) {
                        const linkMatch = line.match(/<a href="\?page=battle_report.*?<\/a>/);
                        if (linkMatch) {
                            const fullLink = "https://evergore.de/lenoran" + linkMatch[0].match(/href="(.*?)"/)[1];

                            const beforeMatch = p.innerHTML.split(linkMatch[0])[0].split("<b>").pop();
                            let beforeLink = "";
                            if (beforeMatch) {
                                beforeLink = beforeMatch.trim().replace(/<br>/g, ' | ');
                            }

                            // Extrahiere Zeit und Wochentag
                            const beforeParts = beforeLink.split(" | ");
                            const beforeTime = beforeParts[0]?.split(" ")[0]?.trim(); // Uhrzeit
                            const beforeDay = beforeParts[0]?.match(/\((.*?)\)/)?.[1]?.trim(); // Wochentag

                            const { result, plans, estimatedRounds } = await checkBattleResult(fullLink, playerName);
                            if (result === "Kampf gewonnen!") winCount++;

                            if (plans && plans.length > 0) {
                                plans.forEach(plan => allPlans.add({ plan, link: fullLink }));
                            }

                            if (beforeDay && beforeTime) {
                                // Füge die geschätzte Rundenanzahl hinzu
                                const roundText = estimatedRounds ? ` ${estimatedRounds} ${estimatedRounds === 1 ? "Runde" : "Runden"}` : "";
                                formattedLines.push(`${beforeDay} | ${beforeTime} | ${result} | ${roundText} | ${linkMatch[0]}`);
                            }
                        }
                    }

                    const winText = winCount === battleCount ? "alle" : winCount.toString();
                    const plansText = allPlans.size > 0
                        ? `<br><br><b>Gefundene Pläne:</b> ${Array.from(allPlans).map(item => `<a href="${item.link}">${item.plan}</a>`).join(", ")}`
                        : "";

                    p.innerHTML = `<b>${battleCount} Kämpfe, davon ${winText} gewonnen</b>${plansText}<br><br>` + formattedLines.join("<br><br>");
                }
            }
        });

        function createResetButton() {
            const resetButton = document.createElement("button");
            resetButton.textContent = "Zurücksetzen";
            resetButton.className = "btn";
            resetButton.style.marginLeft = "10px";

            resetButton.addEventListener("click", () => {
                location.reload(); // Seite neu laden
            });

            const deleteButtonParent = document.querySelector('input[value="Löschen"]')?.parentNode;
            if (deleteButtonParent) {
                deleteButtonParent.appendChild(resetButton);
            }
        }
    }

    async function checkBattleResult(url, playerName) {
        try {
            const decodedUrl = url.replace(/&amp;/g, "&");
            const response = await fetch(decodedUrl);
            const text = await response.text();

            const participantMatch = [...text.matchAll(/setParticipant\((.*?)\);/g)].find(match => {
                const args = match[1].split(",");
                const participantName = args[1].replace(/["']/g, "").trim();
                return participantName === playerName;
            });

            if (!participantMatch) {
                console.error("Teilnehmernummer für den Spieler nicht gefunden.");
                return { result: "Kampfstatus konnte nicht ermittelt werden.", plans: [], estimatedRounds: null };
            }

            const participantNumber = participantMatch[1].split(",")[2].trim();
            const winnerMatch = text.match(/winner\((\d+)\);/);
            if (!winnerMatch) {
                console.error("Keine Gewinnernummer gefunden.");
                return { result: "Kampfstatus konnte nicht ermittelt werden.", plans: [], estimatedRounds: null };
            }

            const winnerNumber = winnerMatch[1];
            const result = participantNumber === winnerNumber ? "Kampf gewonnen!" : "Kampf verloren!";

            const lootMatches = [...text.matchAll(/loot\((.*?)\);/g)];
            const plans = lootMatches
                .map(match => match[1].split(",")[1]?.replace(/["']/g, "").trim())
                .filter(item => item && item.includes("(Plan)"));

            // Suche nach der letzten Instanz von unconcious() und bestimme die Rundenanzahl
            const lastUnconciousMatch = [...text.matchAll(/unconcious\((\d+),/g)].pop();
            const estimatedRounds = lastUnconciousMatch
                ? Math.ceil(parseInt(lastUnconciousMatch[1]) / 24) // Teile durch 24 und runde auf
                : null;

            return { result, plans, estimatedRounds };
        } catch (error) {
            console.error("Fehler beim Abrufen oder Verarbeiten des Kampfberichts:", error);
            return { result: "Kampfstatus konnte nicht ermittelt werden.", plans: [], estimatedRounds: null };
        }
    }
})();
