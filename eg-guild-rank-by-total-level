// ==UserScript==
// @name         Gildenrangliste nach Gesamtstufe
// @version      0.3a
// @description  Ändert in der Gildenrangliste in allen Welten die Gesamtpunkte in Gesamtstufe und sortiert die Tabelle danach und stellt alle Gilden auf einer Seite dar
// @author       mofte
// @match        https://evergore.de/*?page=ranking_guild
// @icon         https://evergore.de/favicon.ico
// ==/UserScript==

(function () {
    'use strict';

    // Funktion, um das Formular zu entfernen
    function removeForm() {
        const form = document.querySelector('form[action=""]');
        if (form) {
            form.remove();
            console.log('Formular wurde entfernt.');
        }
    }

    // Funktion, um eine Seite per Fetch zu laden
    async function fetchPage(pos) {
        // Ermittelt den aktuellen Pfad (z. B. /zyrthania oder /lenoran) aus der URL
        const currentPath = window.location.pathname.split('/')[1]; // Zweiter Teil des Pfads
        const url = `https://evergore.de/${currentPath}?page=ranking_guild&pos=${pos}`;

        try {
            const response = await fetch(url);
            if (!response.ok) {
                console.error(`Fehler beim Laden der Seite: ${url}`);
                return null;
            }
            const html = await response.text();
            const parser = new DOMParser();
            return parser.parseFromString(html, 'text/html');
        } catch (error) {
            console.error(`Fehler beim Abrufen der Seite ${url}:`, error);
            return null;
        }
    }

    // Setze `addedRanks` auf die ersten 20 Ränge nach dem Aufruf der ersten Seite
    let addedRanks = new Set(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"]);
    console.log("Initialisierte Ränge:", Array.from(addedRanks));

    // Funktion, um die Ränge aus der vierten Tabelle zu extrahieren
    function extractRanks(doc) {
        const tables = doc.querySelectorAll('table');
        const targetTable = tables[3]; // 4. Tabelle auf der Seite
        if (!targetTable) {
            console.error('Vierte Tabelle wurde nicht gefunden.');
            return [];
        }

        const rows = targetTable.querySelectorAll('tbody tr');
        if (rows.length <= 1) { // Keine Datenzeilen vorhanden
            return [];
        }

        // Überspringe die Kopfzeile und extrahiere die Daten
        return Array.from(rows)
            .slice(1) // Kopfzeile überspringen
            .map(row => {
                const rank = row.querySelector('td:first-child').textContent.trim(); // Erste Zelle für Rangnummer
                return { rowHTML: row.outerHTML.trim(), rank, row };
            });
    }

    // Funktion, um die neuen Ränge in die Haupttabelle (4. Tabelle) einzufügen
    function appendRanksToTable(rows) {
        const tables = document.querySelectorAll('table');
        const mainTable = tables[2]?.querySelector('tbody'); // 4. Tabelle auf der Hauptseite
        if (!mainTable) {
            console.error('Haupttabelle nicht gefunden.');
            return;
        }

        for (let { rowHTML, rank, row } of rows) {
            // Überprüfe, ob der Rang bereits hinzugefügt wurde
            if (addedRanks.has(rank)) {
                console.log(`Rang ${rank} bereits hinzugefügt. Überspringe Zeile.`);
                continue;
            }

            // Füge die Zeile hinzu
            const newRow = document.createElement('tr');
            newRow.innerHTML = rowHTML; // Zeile als HTML einfügen
            mainTable.appendChild(newRow);
            addedRanks.add(rank); // Rang zur Set hinzufügen, um Duplikate zu vermeiden
        }
    }

    // Funktion zur Extraktion der Level-Daten von einer Gildenseite
    function extractLevelFromPage(url) {
        return new Promise((resolve, reject) => {
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        reject("Fehler beim Laden der Seite.");
                        return;
                    }
                    return response.text();
                })
                .then(html => {
                    // RegEx um alle Level-Werte innerhalb der 2. Tabelle zu finden
                    let levelMatches = [];
                    let levelRegex = /Level (\d{1,2})/g;
                    let match;

                    // Suche nach Leveln nur in der 2. Tabelle
                    let tables = html.split('<table');
                    if (tables.length > 2) {
                        let secondTable = tables[2]; // Die 2. Tabelle (Index 2 nach Aufteilen)
                        while ((match = levelRegex.exec(secondTable)) !== null) {
                            levelMatches.push(parseInt(match[1]));
                        }
                    }

                    if (levelMatches.length === 0) {
                        reject("Keine Level in der 2. Tabelle gefunden.");
                        return;
                    }

                    // Berechne die Summe der Level
                    let totalLevel = levelMatches.reduce((sum, level) => sum + level, 0);
                    resolve(totalLevel);
                })
                .catch(() => reject("Fehler beim Laden der Seite."));
        });
    }

    async function loadAllRanks() {
        let pos = 1; // Startposition für die erste Seite
        let hasMore = true;
        let lastRowHTML = ''; // Variable zum Speichern der letzten Zeile

        // Entferne das Formular zu Beginn
        removeForm();

        // Zuerst die erste Seite mit den ersten Rängen laden
        const doc = await fetchPage(pos);
        if (!doc) {
            console.warn(`Fehler beim Laden der ersten Seite.`);
            return;
        }

        // Lade nun die weiteren Seiten ab pos=31
        pos = 31;

        while (hasMore) {
            const doc = await fetchPage(pos);
            if (!doc) {
                console.warn(`Keine weiteren Daten für pos=${pos}`);
                hasMore = false;
                break;
            }

            const ranks = extractRanks(doc);
            if (ranks.length > 0) {
                console.log(`Ränge von pos=${pos} geladen:`, ranks);

                // Vergleiche die letzte Zeile mit der letzten bekannten Zeile
                const currentLastRowHTML = ranks[ranks.length - 1].rowHTML;
                if (currentLastRowHTML === lastRowHTML) {
                    console.log('Keine neuen Einträge gefunden. Stoppe das Laden.');
                    hasMore = false;
                    break;
                }

                // Aktualisiere die letzte bekannte Zeile und füge neue Ränge ein
                lastRowHTML = currentLastRowHTML;
                appendRanksToTable(ranks);
                ranks.forEach(({ rank }) => addedRanks.add(rank)); // Neue Ränge in das Set einfügen
                pos += 30; // Nächste Seite
            } else {
                console.warn(`Keine weiteren Ränge bei pos=${pos}.`);
                hasMore = false;
            }
        }

        console.log('Laden aller Ränge abgeschlossen.');

        // Berechnet und fügt Gesamtstufen hinzu
        async function calculateAndUpdateTotalLevels() {
            const tables = document.querySelectorAll('table');
            const guildTable = tables[2]; // Die 3. Tabelle

            if (!guildTable) {
                console.error('Tabelle für die Gildenrangliste nicht gefunden.');
                return;
            }

            const rows = guildTable.querySelectorAll('tbody tr');
            for (let row of rows) {
                const link = row.querySelector('td a');
                if (link) {
                    const guildUrl = link.href;
                    try {
                        const totalLevel = await extractLevelFromPage(guildUrl);  // Hier wird die Zeile (row) übergeben
                        const totalPointsCell = row.querySelector('td:last-child');
                        if (totalPointsCell) {
                            totalPointsCell.textContent = totalLevel;  // Gesamtstufe wird angezeigt
                        }
                    } catch (error) {
                        console.error(`Fehler beim Berechnen der Gesamtstufe für ${guildUrl}:`, error);
                    }
                }
            }
        }

        await calculateAndUpdateTotalLevels();
        updateGuildRankingByTotalLevel(); // Neu sortieren nach dem Einfügen aller Ränge
    }

    // Funktion, die die Gildenrangliste basierend auf der Gesamtstufe sortiert
    function updateGuildRankingByTotalLevel() {
        let tables = document.querySelectorAll('table');
        if (tables.length > 2) {
            let guildTable = tables[2]; // Die 3. Tabelle ist Index 2

            // Iteriere über jede Zeile der Tabelle und hole die Links in der zweiten Spalte
            let rows = guildTable.querySelectorAll('tbody tr');
            let rowData = [];

            rows.forEach((row) => {
                let link = row.querySelector('td a');
                if (link) {
                    let guildUrl = link.href;

                    // Gesamtstufe direkt im DOM durch die vorherige Berechnung einfügen
                    let totalLevel = parseInt(row.querySelector('td:last-child').textContent) || 0;
                    rowData.push({ row, totalLevel });
                }
            });

            // Nach der Iteration nach Gesamtstufe absteigend sortieren
            rowData.sort((a, b) => b.totalLevel - a.totalLevel);

            // Die Zeilen in der Tabelle neu anordnen
            let tbody = guildTable.querySelector('tbody');
            rowData.forEach((item, index) => {
                tbody.appendChild(item.row);  // Reihenfolge der Zeilen gemäß totalLevel anpassen

                // Die Nummerierung in der ersten Spalte von 1 an neu setzen
                let firstColumnCell = item.row.querySelector('td:first-child');
                if (firstColumnCell) {
                    let originalContent = firstColumnCell.innerHTML.trim();  // Behalte den ursprünglichen Inhalt der Zelle
                    // Setze den neuen Nummerierungstext mit Beibehaltung der Formatierung
                    firstColumnCell.innerHTML = originalContent.replace(/\d+/, index + 1);  // Ersetze nur die Zahl
                }
            });

            // Überschrift ändern
            let headerRow = guildTable.querySelector('tr');
            if (headerRow) {
                let headerCells = headerRow.querySelectorAll('th');
                if (headerCells.length > 3) {
                    headerCells[3].textContent = 'Gesamtstufe';  // Ändere den Text der 4. Spalte
                }
            }
        }
    }

    // Skript starten, sobald die Seite vollständig geladen ist
    window.addEventListener('load', () => {
        loadAllRanks();
    });

})();
